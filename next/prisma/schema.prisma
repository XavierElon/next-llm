// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String         @unique
  conversations Conversation[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@map("users")
}

model Conversation {
  id        Int       @id @default(autoincrement())
  title     String?
  userId    Int       @map("user_id")
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
  isPinned  Boolean   @default(false) @map("is_pinned")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("conversations")
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String       @db.Text
  role           String       // 'user' or 'assistant'
  conversationId Int          @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now()) @map("created_at")

  @@map("messages")
}

model Problem {
  id          Int         @id @default(autoincrement())
  title       String
  description String      @db.Text
  difficulty  String      // 'Easy', 'Medium', 'Hard'
  category    String      // 'Algorithms', 'Data Structures', etc.
  tags        String[]    @db.Text
  functionName String     // Name of the function to test against
  testCases   TestCase[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("problems")
}

model TestCase {
  id          Int      @id @default(autoincrement())
  input       String   @db.Text
  expected    String   @db.Text
  description String?  @db.Text
  problemId   Int      @map("problem_id")
  problem     Problem  @relation(fields: [problemId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("test_cases")
} 